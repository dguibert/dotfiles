Host 127.0.0.1 | localhost
  ForwardAgent yes
  ForwardX11 yes
  ForwardX11Trusted yes
  NoHostAuthenticationForLocalhost yes

Host *
  ConnectTimeout 10
#  ControlPath ~/.ssh/ssh_control_%l_%h_%p_%r
  ControlMaster auto
#  ControlPersist 5
  ForwardAgent yes
  ForwardX11 no
  TCPKeepAlive yes

Host sid
  User bguibertd
  RemoteForward 33128 localhost:33128
  HostName 129.184.11.12
  Port 9922

Host robin
  User bguibertd
  RemoteForward 33128 localhost:33128
  HostName 129.184.11.12
  Port 22022

## SSH Reverse socks tunnel
## Can be achieved transparently with this snippet in ~/.ssh/config:
## 
#Host sockstunnel
##  ProxyCommand ssh -D 33128 localhost nc -q 1 localhost 22
#  ProxyCommand ssh -D 33128 localhost nc localhost 22
# 
#Host robin
#  RemoteForward 33128 localhost:33128
#  ProxyCommand ssh -vvvv -l bguibertd -W 129.184.11.12:22022 sockstunnel
## Details
## We want a reverse DynamicForward. This is achieved using two ssh commands:
## 
## ssh -D 3128 localhost
## ssh -R 3128:localhost:3128 target
## This way target has a SOCKS tunnel to the SSH client.
## 
## What I did is to use the classical way of chaining ssh to reach a remote target through intermediate hosts so that the SOCKS tunnel creation is handled transparently while logging into the target. The first ProxyCommand + nc trick is mandatory because -W implies ClearAllForwardings.

#Host orsine
#  HostName 10.147.17.123
#  HostKeyAlias orsine
#  identityfile ~/.ssh/david.guibert

