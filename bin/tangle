#!/usr/bin/env python3
##!/usr/bin/env nix-shell
##! nix-shell -i python3 -p python3
# -*- coding: utf-8 -*-
#
# based on noweb.py by Jonathan Aquino (jonathan.aquino@gmail.com)
# see http://jonaquino.blogspot.com/2010/04/nowebpy-or-worlds-first-executable-blog.html
# But beware: It contains an error that overwrites previous code chunks with
# the same name!
#
# Copyright (c) 2014, 2015 Meik Teßmer
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright notice,
#      this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of daemogorgon.net nor the names of its
#      contributors may be used to endorse or promote products derived from
#      this without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

"""
If you use tangle with more than one file, it will join all files into one and
start then the tangle process.  With this you get an inter-file wide namespace
of code chunks.  This supports large projects with multiple files.  But
beware the order of the files you give!

"""
import argparse
import fileinput
import re
import sys


__author__ = "Meik Teßmer"
__email__ = "mtessmer@wiwi.uni-bielefeld.de"
__version__ = "0.1.2"

def collect_code_chunks(filenames):
    code_chunks = {}
    with fileinput.input(filenames) as f:
        collect_chunks_from_file(f, code_chunks)

    return code_chunks


def collect_chunks_from_file(file, code_chunks):
    chunk_name = None
    open_mark = "<<"
    close_mark = ">>"

    for line in file:
        # look for annotated code chunk header, e.g. = (make)
        # this is the enhanced noweb syntax defined by me
        match = re.match(open_mark + "([^>]+)" + close_mark + "=\s*\((\w+)\)", line)
        if not match:
            # ok, use normal noweb syntax
            match = re.match(open_mark + "([^>]+)" + close_mark + "=", line)
            if match:
                # found normale code chunk definition
                chunk_name = match.group(1)
                # create new entry if necessary
                # bug in original version!
                if not chunk_name in code_chunks:
                    code_chunks[chunk_name] = []
            else:
                # no code chunk definition, maybe a new doc chunk?
                match = re.match("@", line)
                if match:
                    chunk_name = None
                elif chunk_name:
                    # if chunkName is defined, we are in a code chunk and
                    # collect the line
                    code_chunks[chunk_name].append(line)
        else:
            # found a new code chunk definition (enhanced syntax)
            chunk_name = match.group(1)
            # create new entry if necessary
            # bug in original version!
            if not chunk_name in code_chunks:
                code_chunks[chunk_name] = []


def expand(chunk_name, code_chunks, indent):
    """expand given code chunk"""

    open_mark = "<<"
    close_mark = ">>"

    try:
        chunk_lines = code_chunks[chunk_name]
    except KeyError:
        print("the given chunk name '{0}' was not found".format(chunk_name), file=sys.stderr)
        sys.exit(1)

    expanded_chunk_lines = []
    for line in chunk_lines:
        match = re.match("(\s*)" + open_mark + "([^>]+)" + close_mark + "\s*$", line)
        if match:
            expanded_chunk_lines.extend( expand(match.group(2), code_chunks, indent + match.group(1)) )
        else:
            expanded_chunk_lines.append(indent + line)
    return expanded_chunk_lines


def tangle(chunk_name, filenames, out):
    """tangle filenames with given chunk name"""

    code_chunks = collect_code_chunks(filenames)
    lines = expand(chunk_name, code_chunks, "")
    sys.stdout.write("".join(lines))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="tangle files with enhanced noweb structure")
    parser.add_argument("-R", dest="chunk_name", metavar="chunk_name",
            help="chunk name to start with", required=True)
    parser.add_argument("filename", nargs="+", help="filename(s) to use")

    args = parser.parse_args()
    out = sys.stdout
    
    tangle(args.chunk_name, args.filename, out)


# vim:tabstop=4:shiftwidth=4:smarttab:expandtab:softtabstop=4:autoindent
