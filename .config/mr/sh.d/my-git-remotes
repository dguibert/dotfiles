# -*- mode: sh -*-
# vim: ft=sh :
datalad_add_new_ria () {
    local remote="$1"
    local url="$2"
    if datalad create-sibling-ria -s "$remote" "ria+$url"; then
        info "+ Added RIA $remote -> $url"
        return 0
    else
        if datalad create-sibling-ria -s "$remote" "ria+$url" --existing reconfigure --new-store-ok; then
            info "+ Added RIA $remote -> $url (reconfigured)"
            return 0
        else
            error "! Failed to add RIA remote $remote"
            return 1
        fi
    fi
}

datalad_add_ria () {
    local remote="$1"
    local url="$2"
    local datalad_id=$(git config -f .datalad/config datalad.dataset.id | sed "s:^\(...\):\1/:")
    local existing_url=$( git config "remote.$remote.url" ) || true
    if [ -n "$existing_url" ]; then
        if [ "$url/$datalad_id" = "$existing_url" ]; then
            info ". Remote $remote already points to $url"
            return 0
        fi

        if [ -n "${MR_OVERWRITE_REMOTES-}" ]; then
            datalad create-sibling-ria -s "$remote" "ria+$url" --existing reconfigure --new-store-ok
            return 0
        else
            warning "! Remote $remote already points to $existing_url not $url/$datalad_id"
            warning "! Use MR_OVERWRITE_REMOTES=y to rewrite URL."
            return 0
        fi
    fi

    datalad_add_new_ria "$remote" "$url"
}

# datalad_add_sibling_rias REMOTES
#
# REMOTES is a multi-line string where each line is
#
#   REMOTE URL [EXCEPTION]
#
# Invokes datalad_add_ria for each line,
# substituting 'REMOTE' for REMOTE in URL,
# except for lines where localhost nickname equals EXCEPTION
datalad_add_sibling_rias () {
    local remote url exception
    #read_localhost_nickname
    # Needs to be exported to while-read subshell
    export LOCALHOST_NICKNAME="$localhost_nickname"
    echo "$*" | while read remote url exception; do
        if [ -z "$remote$url" ]; then
            # presumably got a blank line
            continue
        fi
        url=$( echo "$url" | sed "s/REMOTE/$remote/g" )

        if [ -z "$exception" ]; then
            exception="$remote"
        fi
        if [ "$LOCALHOST_NICKNAME" = "$exception" ]; then
            #info "Won't add remote $url for $exception"
            continue
        fi

        datalad_add_ria "$remote" "$url"
    done
}

# + datalad create-sibling -s ria-genji-lustre_ddn7k ssh://genji/scratch_lustre_DDN7k/bguibertd/ria-store/eb9/d4319-1227-4d96-ad17-301a2360c383 --existing reconfigure
# [INFO] Connecting ...
# [INFO] Considering to create a target dataset /home/dguibert/work/code/hpcw at /scratch_lustre_DDN7k/bguibertd/ria-store/eb9/d4319-1227-4d96-ad17-301a2360c383 of genji
# [INFO] Target path /scratch_lustre_DDN7k/bguibertd/ria-store/eb9/d4319-1227-4d96-ad17-301a2360c383 already exists. Will only reconfigure
# [INFO] Fetching updates for Dataset(/home/dguibert/work/code/hpcw)
# update(ok): . (dataset)
# CommandError: 'git -c diff.ignoreSubmodules=none cat-file blob git-annex:remote.log' failed with exitcode 128
# fatal: invalid object name 'git-annex'.
datalad_add_new_sibling () {
    local remote="$1"
    local url="$2"
    if datalad create-sibling -s "$remote" "$url"; then
        echo "+ Added sibling $remote -> $url"
        return 0
    else
        if datalad create-sibling -s "$remote" "$url" --existing reconfigure; then
            echo "+! Added sibling $remote -> $url (reconfigured)"
            return 0
        else
            error "! Failed to add sibling remote $remote"
            return 1
        fi
    fi
}

datalad_add_sibling () {
    local remote="$1"
    local url="$2"
    local existing_url=$( git config "remote.$remote.url" ) || true
    if [ -n "$existing_url" ]; then
        if [ "$url" = "$existing_url" ]; then
            info ". Remote $remote already points to $url"
            return
        fi

        if [ -n "${MR_OVERWRITE_REMOTES-}" ]; then
            datalad_add_new_sibling "$remote" "$url"
            return
        else
            warning "! Remote $remote already points to $existing_url not $url/$datalad_id"
            warning "! Use MR_OVERWRITE_REMOTES=y to rewrite URL."
            return
        fi
    fi

    datalad_add_new_sibling "$remote" "$url"
}

# datalad_add_siblings REMOTES
#
# REMOTES is a multi-line string where each line is
#
#   REMOTE URL [EXCEPTION]
#
# Invokes datalad_add_sibling for each line,
# substituting 'REMOTE' for REMOTE in URL,
# except for lines where localhost nickname equals EXCEPTION
datalad_add_siblings () {
    local remote url exception
    #read_localhost_nickname
    # Needs to be exported to while-read subshell
    export LOCALHOST_NICKNAME="$localhost_nickname"
    set -x
    echo "$*" | while read remote url exception; do
        if [ -z "$remote$url" ]; then
            # presumably got a blank line
            continue
        fi
        url=$( echo "$url" | sed "s/REMOTE/$remote/g" )

        if [ -z "$exception" ]; then
            exception="$remote"
        fi
        if [ "$LOCALHOST_NICKNAME" = "$exception" ]; then
            #info "Won't add remote $url for $exception"
            continue
        fi

        datalad_add_sibling "$remote" "$url"
    done
    set -x
}

git_annex_groups () {
    local remote="$1"
    shift
    local groups="$(echo $(printf '%s\n' $@ | sort -u))"
    if ! test -d .git/annex; then
        return 0
    fi
    groups_=$(git annex group  $remote)
    if [[ ! "$groups_" = "$groups" ]]; then
        for group in ${groups_}; do
            info ". Remote $remote ungroup $group"
            git annex ungroup $remote $group
        done
        for group in ${groups}; do
            info ". Remote $remote   group $group"
            git annex   group $remote $group
        done
    fi
}
git_annex_wanted () {
    local remote="$1"
    shift
    local wanted="$@"
    if ! test -d .git/annex; then
        return 0
    fi
    wanted_=$(git annex wanted $remote)
    if [[ ! "$wanted_" = "$wanted" ]]; then
        info ". Remote $remote wanted $wanted"
        git annex wanted $remote "$wanted"
    fi
}
git_add_config () {
    local key="$1"
    local value="$2"
    if git config --get-all $key | grep -qF "$value"; then
        return 0
    fi

    info ". add $key=$value"
    git config --add $key $value
}

personal_remotes () {
    local repo datalad_id
    if not_personal; then
        return 0
    fi
    repo="${MR_REPO#$HOME/}"
    # quote spaces to avoid passing too many parameters to
    # git_add_remotes
    repo=$( echo "$repo" | sed 's/ /\\ /g' )
    datalad_id=$(git config -f .datalad/config datalad.dataset.id | sed "s:^\(...\):\1/:")

    # Note: uses URL rewriting so we can decide independently
    # whether to fetch over wired/wireless or even ADSL.

    # Old remotes:
    git_rm_remotes "
      orsine
      orsine-backupwd
      vbox-57nvj72
      transfert
    "

    git_add_remotes "
      titan REMOTE:$repo titan
      t580  REMOTE:$repo t580
    "
    # TODO only if hostname !- git_annex_groups titan home_t
    # TODO only if hostname !- git_annex_wanted titan present
    # TODO only if hostname !- git_annex_groups t580 home_t
    # TODO only if hostname !- git_annex_wanted t580 present

    if [[ -n "${datalad_id-}" ]]; then
        # add datalad RIAs
        git annex numcopies 3
        if test -d /backupwd/ria; then
            datalad_add_ria backupwd file:///backupwd/ria
            git_annex_groups backupwd-storage offline_t ria_t
            git_annex_wanted backupwd-storage "not (copies=offline_t:2)"
        fi
        if test -d /backup2/ria; then
            datalad_add_ria backup2 file:///backup2/ria
            git_annex_groups backup2-storage offline_t ria_t
            git_annex_wanted backup2-storage "not (copies=offline_t:2)"
        fi

        git_ping_remotes "
            backupwd
            backup2
        "
    fi

    git_ignore_remotes "
    "

    # These are often down
    git_ping_remotes "
      t580
      backupwd
    "
}

auto_personal_remotes () {
    personal_remotes
}

work_remotes () {
    if not_work; then
        return 0
    fi
    cd "$MR_REPO"
    repo="${MR_REPO#$HOME/}"
    # quote spaces to avoid passing too many parameters to
    # git_add_remotes
    repo=$( echo "$repo" | sed 's/ /\\ /g' )
    if echo $repo | grep -qv "^work"; then
        return 0
    fi
    datalad_id=$(git config -f .datalad/config datalad.dataset.id | sed "s:^\(...\):\1/:")

    # Note: uses URL rewriting so we can decide independently
    # whether to fetch over wired/wireless or even ADSL.

    # Old remotes:
    git_rm_remotes "
      manny_lustre_na
      orsine
      orsine-backupwd
      vbox-57nvj72
      spartan
      genji
    "

    git_add_remotes "
    "
    git_ignore_remotes "
    "

    # These are often down
    git_ping_remotes "
    "

    if [[ -n "${datalad_id-}" ]]; then
      info ". datalad id: ${datalad_id} found"
      git_rm_remotes "
        ria-genji-lustre_na
        ria-genji-lustre_na-storage
      "
      if ! test -d .git/annex; then
          git annex numcopies 3
          # create git repo inside ria without ORA
          datalad_add_ria  ria-titan              ssh://titan/home/dguibert/ria-store/$datalad_id
          datalad_add_ria  ria-spartan            ssh://spartan/home_nfs/bguibertd/ria-store/$datalad_id
          datalad_add_ria  ria-spartan-lustre_na  ssh://spartan/scratch_na/users/bguibertd/ria-store/$datalad_id
          datalad_add_ria  ria-genji              ssh://genji/home_nfs/bguibertd/ria-store/$datalad_id
          datalad_add_ria  ria-genji-lustre_ddn7k ssh://genji/scratch_lustre_DDN7k/bguibertd/ria-store/$datalad_id
      else
          #git_annex_groups genji site_genji
          #git_annex_groups spartan site_spartan
          #
          #git_annex_wanted genji present
          #git_annex_wanted spartan present

          # add datalad RIAs
          datalad_add_ria  ria-titan              ssh://titan/home/dguibert/ria-store
          datalad_add_ria  ria-spartan            ssh://spartan/home_nfs/bguibertd/ria-store
          datalad_add_ria  ria-spartan-lustre_na  ssh://spartan/scratch_na/users/bguibertd/ria-store
          datalad_add_ria  ria-genji              ssh://genji/home_nfs/bguibertd/ria-store
          datalad_add_ria  ria-genji-lustre_ddn7k ssh://genji/scratch_lustre_DDN7k/bguibertd/ria-store
          # 20230323: hangs
          # ria-genji-lustre_na    ssh://genji/scratch_lustre_na/users/bguibertd/ria-store
          git_ping_remotes "
            ria-genji
            ria-genji-lustre_ddn7k
            ria-spartan
            ria-spartan-lustre_na
            ria-titan
        "
          git_annex_groups ria-genji-lustre_ddn7k-storage ria_t site_genji
          #git_annex_groups ria-genji-lustre_na-storage   ria_t site_genji
          git_annex_groups ria-genji-storage home_t ria_t site_genji
          git_annex_groups ria-spartan-lustre_na-storage ria_t site_spartan
          git_annex_groups ria-spartan-storage home_t ria_t site_spartan
          git_annex_groups ria-titan-storage unwanted

          # get 3 copies of RIA, 2 per site and no more copies when reaching 2 offlines
          git_annex_wanted ria-genji-lustre_ddn7k-storage "not (copies=offline_t:2 or (copies=site_genji:2 and copies=ria_t:3))"
          #git_annex_wanted ria-genji-lustre_na-storage   "not (copies=offline_t:2 or (copies=site_genji:2 and copies=ria_t:3))"
          git_annex_wanted ria-genji-storage present
          git_annex_wanted ria-spartan-lustre_na-storage  "not (copies=offline_t:2 or (copies=site_spartan:2 and copies=ria_t:3))"
          git_annex_wanted ria-spartan-storage present
          git_annex_wanted ria-titan-storage standard
          if test -d /backup2/ria; then
              datalad_add_ria backup2 file:///backup2/ria
              git_annex_groups backup2-storage offline_t
              git_annex_wanted backup2-storage "not (copies=offline_t:2)"

              git_ping_remotes backup2
          fi
      fi
    else
      info ". no datalad id"
    fi

}

auto_work_remotes () {
    work_remotes
}

my_upstream_remote () {
    git_add_remote adamspiers.org `my_upstream_url`
}

auto_my_upstream_remote () {
    case "$MR_NAME" in
        *)
            my_upstream_remote
            ;;
    esac
}

auto_external_remotes () {
    :
    #set_origin_remote

    #if ! confidential_repo; then
    #    # only do this if cloned from local
    #    github_clone_remote
    #fi
}

auto_remotes () {
    auto_personal_remotes
    auto_work_remotes
    auto_external_remotes
}
