# vim: ft=sh :
# Usage: use nix_shell
#
# Works like use_nix, except that it's only rebuilt if the shell.nix or default.nix file changes.
# This avoids scenarios where the nix-channel is being updated and all the projects now need to be re-built.
#
# To force the reload the derivation, run `touch shell.nix`
set -euo pipefail
#set -xv

fail() {
  local msg=$1
  echo $msg >&2
  exit 1
}
log_status() {
  local msg=$1
  echo $msg >&2
}

use_nix_shell() {
  local shellfile=shell.nix
  local wd=$PWD/.direnv/nix
  local drvfile=$wd/shell.drv

  # same heuristic as nix-shell
  if [[ ! -f $shellfile ]]; then
    shellfile=default.nix
  fi

  if [[ ! -f $shellfile ]]; then
    fail "use nix_shell: shell.nix or default.nix not found in the folder"
  fi

  if [[ -f $drvfile && $(stat -c %Y $shellfile) -gt $(stat -c %Y $drvfile) ]]; then
    log_status "use nix_shell: removing stale drv"
    rm "$drvfile"
  fi

  if [[ ! -f $drvfile ]]; then
    mkdir -p "$wd"
    # instanciate the drv like it was in a nix-shell
    IN_NIX_SHELL=1 nix-instantiate \
      --add-root "$drvfile" --indirect \
      "$shellfile"

    nix-store \
      -r $(nix-store --query --references "$drvfile") \
      --add-root "$wd/dep" --indirect >/dev/null
  fi

  direnv_load nix-shell "$drvfile" --run 'direnv dump'
  watch_file "$shellfile"
}
