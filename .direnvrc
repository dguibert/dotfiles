# vim: ft=sh :
# -*- mode: sh-mode; -*-
# Usage: use nix_shell
#
# Works like use_nix, except that it's only rebuilt if the shell.nix or default.nix file changes.
# This avoids scenarios where the nix-channel is being updated and all the projects now need to be re-built.
#
# To force the reload the derivation, run `touch shell.nix`
set -euo pipefail
#set -xv

fail() {
  local msg=$1
  echo $msg >&2
  exit 1
}
log_status() {
  local msg=$1
  echo $msg >&2
}

use_nix_shell() {
  local shellfile=shell.nix
  local wd=$PWD/.direnv/nix
  local drvfile=$wd/shell.drv

  # same heuristic as nix-shell
  if [[ ! -f $shellfile ]]; then
    shellfile=default.nix
  fi

  if [[ ! -f $shellfile ]]; then
    fail "use nix_shell: shell.nix or default.nix not found in the folder"
  fi

  if [[ -f $drvfile && $(stat -c %Y $shellfile) -gt $(stat -c %Y $drvfile) ]]; then
    log_status "use nix_shell: removing stale drv"
    rm "$drvfile"
  fi

  if [[ ! -f $drvfile ]]; then
    mkdir -p "$wd"
    # instanciate the drv like it was in a nix-shell
    IN_NIX_SHELL=1 nix-instantiate \
      --add-root "$drvfile" --indirect \
      "$shellfile"

    nix-store \
      -r $(nix-store --query --references "$drvfile") \
      --add-root "$wd/dep" --indirect >/dev/null
  fi

  direnv_load nix-shell "$drvfile" --run 'direnv dump'
  watch_file "$shellfile"
}

use_nix() {
  local path="$(nix-instantiate --find-file nixpkgs)"

  if [ -f "${path}/.version-suffix" ]; then
    local version="$(< $path/.version-suffix)"
  elif [ -f "${path}/.git" ]; then
    local version="$(< $(< ${path}/.git/HEAD))"
  fi

  local cache=".direnv/cache-${version:-unknown}"

  local update_drv=0
  if [[ ! -e "$cache" ]] || \
    [[ "$HOME/.direnvrc" -nt "$cache" ]] || \
    [[ .envrc -nt "$cache" ]] || \
    [[ default.nix -nt "$cache" ]] || \
    [[ shell.nix -nt "$cache" ]];
  then
    [ -d .direnv ] || mkdir .direnv
    local tmp=$(nix-shell --show-trace --pure "$@" \
      --run "\"$direnv\" dump bash")
    echo "$tmp" > "$cache"
    update_drv=1
  else
    log_status using cached derivation
  fi
  local term_backup=$TERM path_backup=$PATH
  if [ -z ${TMPDIR+x} ]; then
    local tmp_backup=$TMPDIR
  fi

  if [ -z ${SSL_CERT_FILE+x} ]; then
    local ssl_cert_file_backup=$SSL_CERT_FILE
  fi
  if [ -z ${NIX_SSL_CERT_FILE+x} ]; then
    local nix_ssl_cert_file_backup=$NIX_SSL_CERT_FILE
  fi
  eval "$(< $cache)"
  export PATH=$PATH:$path_backup TERM=$term_backup TMPDIR=$tmp_backup
  if [ -z ${tmp_backup+x} ]; then
    export TMPDIR=${tmp_backup}
  else
    unset TMPDIR
  fi
  if [ -z ${ssl_cert_file_backup+x} ]; then
    export SSL_CERT_FILE=${ssl_cert_file_backup}
  else
    unset SSL_CERT_FILE
  fi
  if [ -z ${nix_ssl_cert_file_backup+x} ]; then
    export NIX_SSL_CERT_FILE=${nix_ssl_cert_file_backup}
  else
    unset NIX_SSL_CERT_FILE
  fi

  # This part is based on https://discourse.nixos.org/t/what-is-the-best-dev-workflow-around-nix-shell/418/4
  if [ "$out" ] && (( $update_drv )); then
    local drv_link=".direnv/drv"
    local drv="$(nix show-derivation $out | grep -E -o -m1 '/nix/store/.*.drv')"
    local stripped_pwd=${PWD/\//}
    local escaped_pwd=${stripped_pwd//-/--}
    local escaped_pwd=${escaped_pwd//\//-}
    ln -fs "$drv" "$drv_link"
    ln -fs "$PWD/$drv_link" "/nix/var/nix/gcroots/per-user/$LOGNAME/$escaped_pwd"
    log_status renewed cache and derivation link
  fi

  if [[ $# = 0 ]]; then
    watch_file default.nix
    watch_file shell.nix
  fi
}
